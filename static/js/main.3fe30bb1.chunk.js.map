{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onCodeUpdate","value","target","code","setState","compiled_code","window","Babel","transform","presets","error","err","message","state","code_input","this","className","name","placeholder","rows","cols","onChange","defaultValue","style","background","color","padding","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAEqBA,G,kBACnB,aAAc,IAAD,8BACX,+CAKFC,aAAe,YAAwB,IAAbC,EAAY,EAArBC,OAASD,MACxB,IAEE,IAAIE,EAAOF,EACX,EAAKG,SAAS,CACZC,cAAeC,OAAOC,MACrBC,UAAUL,EAAM,CAAEM,QAAS,CAAC,SAAU,WACtCN,KACDO,MAAO,KAET,MAAOC,GACP,EAAKP,SAAS,CAACM,MAAOC,EAAIC,YAf5B,EAAKC,MAAQ,CAACH,MAAO,GAAII,WAAW,GAAIT,cAAe,IAF5C,E,sEAoBH,IAAD,EACkCU,KAAKF,MAAvCH,EADA,EACAA,MAAMI,EADN,EACMA,WAAWT,EADjB,EACiBA,cACxB,OACE,6BACA,yBAAKW,UAAU,UACf,6DACA,6BACA,4BAAQA,UAAU,SAASN,IAE3B,yBAAKM,UAAU,aACb,yBAAKA,UAAU,aACb,8BAAUC,KAAK,YAAaC,YAAY,+BAA+BC,KAAK,KAAKC,KAAK,KAAKC,SAAUN,KAAKf,aAAcsB,aAAcR,KAExI,yBAAKE,UAAU,YACb,6BAAMX,KAGV,6BAEA,yBAAKW,UAAU,QACf,oDACA,6BACA,yBAAKO,MAAO,CAACC,WAAY,OAAQC,MAAO,QAASC,QAAS,SAA1D,oQ,GA3C2BC,cCUbC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.3fe30bb1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./App.css\"\nexport default class App extends Component {\n  constructor(){\n    super();\n    this.state = {error: \"\", code_input: ``,compiled_code: \"\"}\n  }\n\n  \n  onCodeUpdate = ({target: {value}}) => {\n    try {\n      \n      let code = value;\n      this.setState({\n        compiled_code: window.Babel\n        .transform(code, { presets: ['es2015', 'react']})\n        .code,\n        error: ''\n      })\n    } catch (err) {\n      this.setState({error: err.message})\n    }\n  }\n  render() {\n    const {error,code_input,compiled_code} = this.state;\n    return (\n      <div >\n      <div className=\"header\">\n      <h2>Live JSX Compiler Using Babel</h2>\n      <br></br>\n      <header className=\"error\">{error}</header>\n      </div>\n      <div className=\"container\">\n        <div className=\"code_area\">\n          <textarea name=\"text_area\"  placeholder=\"/* Add your JSX Code here */\" rows=\"30\" cols=\"90\" onChange={this.onCodeUpdate} defaultValue={code_input}/>\n        </div>\n        <div className=\"pre_area\">\n          <pre>{compiled_code}</pre>\n        </div>\n      </div>\n      <div>\n      \n      <div className=\"copy\">\n      <h2>Copy Paste this code</h2>\n      <br></br>\n      <pre style={{background: \"#444\", color: \"white\", padding: \"20px\"}}>\n      {`  \n      function Header(props){\n        return <header>{props.title}</header>\n      }\n      function App(){\n        return <div style={{background: \"blue\"}}><h1>Babel is going to compile this </h1> <Header title=\"I'm a prop\" /></div>\n      }`}\n      </pre>\n\n      </div>\n      </div>\n      </div>\n    \n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}